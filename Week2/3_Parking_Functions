Intuition: Based on the set of parking functions for the case n, i.e. parking(n),

1. Insert 1 to n+1, to form a new set of parking functions for the case n+1

2. Remove the duplicates from step 1 to derive parking(n+1)

 

#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
using namespace std;

std::vector<vector<int>> parking(int n){
    vector<vector<int>> result;
    vector<vector<int>> final_result;
    vector<int> tmpVec;
    vector<vector<int>>::iterator it;
   
    // base case: n==1
    tmpVec.push_back(1);
    final_result.push_back(tmpVec);
   
    if (n==1) return final_result;
   
    for (int i=2;i<=n;i++){
        // Insert integers based on the previous step results
        result = final_result;
        final_result.clear();
        for (it = result.begin();it<result.end();it++){
            for (int k=0;k<(*it).size()+1;k++){
                for (int j=1;j<=i;j++){
                    tmpVec = *it;
                    // Insert integers from 1 to i
                    tmpVec.insert(tmpVec.begin()+k,j);
                    final_result.push_back(tmpVec);
                }
            }
        }
        // To remove the duplicates using sort + unique
        sort( final_result.begin(), final_result.end() );
        final_result.erase( unique( final_result.begin(), final_result.end() ), final_result.end() );
    }
    return final_result;
}



Sample outputs for n=3

1 1 1                                                                                                                                                                                
1 1 2                                                                                                                                                                                
1 1 3                                                                                                                                                                                
1 2 1                                                                                                                                                                                
1 2 2                                                                                                                                                                                
1 2 3                                                                                                                                                                                
1 3 1                                                                                                                                                                                
1 3 2                                                                                                                                                                                
2 1 1                                                                                                                                                                                
2 1 2                                                                                                                                                                                
2 1 3                                                                                                                                                                                
2 2 1                                                                                                                                                                                
2 3 1                                                                                                                                                                                
3 1 1                                                                                                                                                                                
3 1 2                                                                                                                                                                                
3 2 1                                                                                                                                                                                
The total number of parking functions is: 16
