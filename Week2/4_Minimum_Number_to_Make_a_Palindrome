#include <vector>
#include <iostream>
using namespace std; 
  
int findMinInsertionsDP(std::vector<char> str, int n)  
{  
    // table[i][j] will store minimum number of insertions  
    // needed to convert str[i..j] to a palindrome
    int table[n][n];
    // row, col are the location on the table
    // diff is the length of str[i..j], i.e. j-i+1
    int row, col, diff;  
  
    // Initialize all table entries as 0  
    for (int i=0; i<n; i++)
        for (int j=0;j<n; j++)
            table[i][j] = 0;

    // Fill the table diagonally
    for (diff = 1; diff < n; ++diff)
        for (row = 0, col = diff; col < n; ++row, ++col){
            // case 1: the left = right
            if (str[row] == str[col]){
                table[row][col] = table[row+1][col-1];
            }
            // case 2: left != right
            else {
                table[row][col] = min(table[row][col-1], table[row+1][col])+1;
            }
        }
        
    // return the value at the up-right corner
    return table[0][n - 1];  
}  



Sample output for "abfabe"

3
