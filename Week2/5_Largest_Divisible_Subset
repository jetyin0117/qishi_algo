#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> largestDivisibleSubset(vector<int>& nums) {
    if (nums.size() == 0) return vector<int>();
    
    // Sort the inputs, so that the vector is increasing
    sort(nums.begin(), nums.end());
    int n = nums.size();
    vector<int> dp(n, 1), parent(n, -1);
    int index = 0;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (nums[j] % nums[i]==0 && dp[j]<dp[i]+1) {
                // Calculate the lengh of the divisible subset 
                dp[j] = dp[i] + 1;
                // Track the parent of the subset
                parent[j] = i;
                // Track the index of largest divisible subset
                if (dp[j] > dp[index]) 
                    index = j;
            }
        }
    }
    
    // Find the largest divisible subset 
    vector<int> ans;
    for (int j = index; j != -1; j = parent[j])
        ans.push_back(nums[j]);
    
    return ans;
}



Sample output for [1,2,3,4,5,6,7,8,9]

8 4 2 1 
